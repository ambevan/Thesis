import numpy as np 
import matplotlib.pyplot as pl
import scipy.signal as sci
import scipy.interpolate as int

def moving_average(x, window):
    """Moving average of 'x' with window size 'window'."""
    y = np.empty(len(x)-window+1)
    for i in range(len(y)):
        y[i] = np.sum(x[i:i+window])/window
    return y


wave_rs,vel_rs,flux_rs=np.loadtxt('output/output_rs.out',skiprows=1,usecols=(0,1,2),unpack=True)
wave_core,vel_core,flux_core=np.loadtxt('output/output_core.out',skiprows=1,usecols=(0,1,2),unpack=True)
vel_dat,flux_dat=np.loadtxt('line.in',skiprows=3,usecols=(0,1),unpack=True)
#vel3,flux3=np.loadtxt('output/output_nodust.out',usecols=(1,2),unpack=True)


s=1.0      #scale factor for core for tweaking
s_rs=1.1  #scale factor for rs   
s_tot=1.0
adj=0.8e-17  #continuum adjustment

#flux_out_dat[flux_out_dat==0]=None
#flux_out_dat=flux_out_dat-np.nanmin(flux_out_dat)
#flux_out_mod=flux_out_mod*s*(np.nanmax(flux_out_dat))/np.nanmax(flux_out_mod)

#diff=100*np.divide(np.subtract(flux_out_dat,flux_out_mod),flux_out_mod)

flux_dat[flux_dat==0]=None
flux_dat=flux_dat-np.nanmin(flux_dat)-adj
flux_core=flux_core*s*(np.nanmax(flux_dat))/np.amax(flux_core)
flux_rs=flux_rs*s_rs*(np.nanmax(flux_dat))/np.nanmax(flux_rs)

flux_tot=flux_core+flux_rs
flux_tot=flux_tot*s_tot*(np.nanmax(flux_dat))/np.nanmax(flux_tot)

lambda0=656.28
#vel_dat=3E5*(wave_dat-lambda0)/lambda0

#flux3=moving_average(flux_mod,5)
#vel3=moving_average(vel,5)
#flux3=flux3*(np.nanmax(flux2_dat))/np.amax(flux3)

pl.xlabel('velocity (kms$^{-1}$)')
pl.ylabel('flux (arbitrary units)')
#pl.title('SN2010jl Halpha d518')
#pl.ylim([0,0.03])
#pl.xscale('log')
#line_1=pl.plot(wave*10, flux_mod,'b',label='observed')
#line_2=pl.plot(wave*10,flux_dat,'r--',label='model')


ax1=pl.subplot2grid((3,1),(0,0),rowspan=3)
ax1.axhline(y=0,color='black')
#line_1=axarr[0].plot(vel2, flux2_dat,'b',label='dat')
#line_2=axarr[0].plot(vel1,flux_mod,'r--',label='mod')
line_1=ax1.plot(vel_dat,flux_dat,'b',label='dat')
line_2=ax1.plot(vel_core,flux_core,'r--',label='core')
#line_3=ax1.plot(vel_rs,flux_rs,'g-.',label='rs')
line4=ax1.plot(vel_rs,flux_tot,'c',label='total')

#line_3=pl.plot(vel3,flux3,'g',label='smooth')
#line=pl.plot(wave2,flux2,'g',label='13nov')
#pl.plot(wave_dat,flux_dat,'r')
#pl.plot(x,y)
ax1.set_xlim([-20000,20000])
#pl.axvline(x=lambda0,color='black',ls='dashed')
pl.axvline(x=0,color='black',ls='dashed')
#axarr[0].legend(['dat','mod'])
ax1.legend(['obs','core','total'])
pl.savefig('87A_d8020_2.eps')
#fig2=pl.figure()
#line_1=pl.plot(vel,flux_mod,'b',label='observed')
#line_2=pl.plot(vel,flux_dat,'r--',label='model'

#pl.show(fig1)

#fig1.text(0.15,0.85,"SN 1987A - day 806 - carbon  \n\n $v_{max} = 6000$kms$^{-1}$ \n ${R_{in}}/{R_{out}}=5$ \n $R_{out}=3.5$x$10^{16}$cm \n $\\tau = 0.22$ \n \n $a=0.06 \\mu$",verticalalignment="top")

#ax2=pl.subplot2grid((3,1),(2,0),sharex=ax1)
#ax2.plot(vel_out,diff)
#ax2.axhline(y=0,color='black')
#ax2.set_ylim([-25,25])
#ax2.set_xlim([-20000,20000])


#fig2=pl.figure()
#line3=pl.plot(vel,flux_mod,'r--',label='model')
#line4=pl.plot(vel,flux_dat,'b',label='observed')
#pl.xlim([-12000,12000])
pl.show()
